// --- Prisma Client (new provider) ---
generator client {
  provider = "prisma-client"
  output   = "../generated/cities"
}

// --- Dedicated datasource (separate DB or schema) ---
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums (duplicated for isolation) ---
enum Category {
  EMPLOYMENT
  SAFETY
  TAX
  LICENSING
  ACCESSIBILITY
  ENVIRONMENT
  PRIVACY
  OTHER
}

enum Severity {
  REQUIRED
  RECOMMENDED
}

enum RuleStatus {
  DRAFT
  ACTIVE
  DEPRECATED
}

enum SourceKind {
  HTML
  PDF
  API
  CSV
  GIS
  OTHER
}

// --- Core models (standalone dataset; no FK to states DB) ---
model City {
  id          Int            @id @default(autoincrement())
  key         String                       // e.g., "NYC"
  name        String
  stateCode   String                       // plain text, not a foreign key
  agencies    CityAgency[]
  obligations CityObligation[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([stateCode, key])
  @@index([stateCode])
}

model CityAgency {
  id         Int         @id @default(autoincrement())
  cityId     Int
  city       City        @relation(fields: [cityId], references: [id], onDelete: Cascade)
  name       String
  acronym    String?
  website    String?
  sources    CitySource[]
  obligations CityObligation[]

  @@unique([cityId, name])
}

model CitySource {
  id        Int         @id @default(autoincrement())
  agencyId  Int?
  agency    CityAgency? @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  title     String
  url       String
  kind      SourceKind   @default(OTHER)
  tags      String[]     @default([])
  lastSeen  DateTime?
  etag      String?
  hash      String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // back-relations
  citations CityRuleCitation[]

  @@unique([url])
  @@index([agencyId, lastSeen])
}

model CityObligation {
  id          Int           @id @default(autoincrement())
  code        String
  title       String
  description String?
  category    Category
  severity    Severity      @default(REQUIRED)
  cityId      Int
  city        City          @relation(fields: [cityId], references: [id], onDelete: Cascade)
  agencyId    Int?
  agency      CityAgency?   @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  rules       CityRule[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([cityId, code])
  @@index([cityId, category])
  @@index([agencyId])
}

model CityRule {
  id            Int            @id @default(autoincrement())
  obligationId  Int
  obligation    CityObligation @relation(fields: [obligationId], references: [id], onDelete: Cascade)
  status        RuleStatus     @default(ACTIVE)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  predicate     Json
  output        Json?
  triggers      String[]       @default([])
  priority      Int            @default(100)
  notes         String?
  citations     CityRuleCitation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([status, effectiveFrom])
  @@index([priority])
  @@index([effectiveFrom, effectiveTo])
}

model CityRuleCitation {
  id        Int         @id @default(autoincrement())
  ruleId    Int
  rule      CityRule    @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  sourceId  Int?
  source    CitySource? @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  quote     String?
  createdAt DateTime    @default(now())

  @@index([ruleId])
  @@index([sourceId])
}