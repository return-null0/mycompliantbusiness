// schemas/common/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../../generated/common"
}

datasource db {
  provider = "postgresql"
  url      = env("COMMON_DATABASE_URL")
}

/* --- Enums (kept minimal) --- */
enum Scope {
  FEDERAL
  STATE
  CITY
}

enum Category {
  EMPLOYMENT
  SAFETY
  TAX
  LICENSING
  ACCESSIBILITY
  ENVIRONMENT
  PRIVACY
  OTHER
}

enum Severity {
  REQUIRED
  RECOMMENDED
}

enum RuleStatus {
  DRAFT
  ACTIVE
  DEPRECATED
}

enum QuestionKind {
  NUMBER
  BOOL
  TEXT
}


/* --- Minimal Question --- */
model Question {
  id        Int           @id @default(autoincrement())
  scope     Scope
  code      String        // stable key used by sessions DB
  kind      QuestionKind
  prompt    String



  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([scope, code])
}

/* --- Minimal Obligation --- */
model Obligation {
  id          Int      @id @default(autoincrement())
  scope       Scope
  code        String   // stable key used by sessions DB
  title       String
  category    Category
  severity    Severity @default(REQUIRED)
  citation    String?  // leave optional for simpler seeds
  description String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rules Rule[]

  @@unique([scope, code])
}

/* --- Minimal Rule --- */
/* Bind a predicate to an obligation (no topic linkage needed). */
model Rule {
  id            Int        @id @default(autoincrement())
  scope         Scope
  obligationId  Int
  obligation    Obligation @relation(fields: [obligationId], references: [id], onDelete: Cascade)

  status        RuleStatus @default(ACTIVE)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  predicate     Json       // tiny DSL evaluated in server

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([scope, status, effectiveFrom])
  @@index([obligationId])
}