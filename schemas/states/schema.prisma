// --- Prisma Client (new provider) ---
generator client {
  provider = "prisma-client"
  output   = "../../generated/states"
}

// --- Dedicated datasource (separate DB or schema) ---
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums (duplicated for isolation) ---
enum Category {
  EMPLOYMENT
  SAFETY
  TAX
  LICENSING
  ACCESSIBILITY
  ENVIRONMENT
  PRIVACY
  OTHER
}

enum Severity {
  REQUIRED
  RECOMMENDED
}

enum RuleStatus {
  DRAFT
  ACTIVE
  DEPRECATED
}

enum SourceKind {
  HTML
  PDF
  API
  CSV
  GIS
  OTHER
}

// --- Core models (standalone dataset) ---
model State {
  id          Int            @id @default(autoincrement())
  code        String         @unique // "NY", "CA"
  name        String         @unique
  agencies    StateAgency[]
  obligations StateObligation[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model StateAgency {
  id         Int          @id @default(autoincrement())
  stateId    Int
  state      State        @relation(fields: [stateId], references: [id], onDelete: Cascade)
  name       String
  acronym    String?
  website    String?
  sources    StateSource[]
  obligations StateObligation[]

  @@unique([stateId, name])
}

model StateSource {
  id        Int          @id @default(autoincrement())
  agencyId  Int?
  agency    StateAgency? @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  title     String
  url       String
  kind      SourceKind    @default(OTHER)
  tags      String[]      @default([])
  lastSeen  DateTime?
  etag      String?
  hash      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // back-relations
  citations StateRuleCitation[]

  @@unique([url])
  @@index([agencyId, lastSeen])
}

model StateObligation {
  id          Int            @id @default(autoincrement())
  code        String
  title       String
  description String?
  category    Category
  severity    Severity       @default(REQUIRED)
  stateId     Int
  state       State          @relation(fields: [stateId], references: [id], onDelete: Cascade)
  agencyId    Int?
  agency      StateAgency?   @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  rules       StateRule[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([stateId, code])
  @@index([stateId, category])
  @@index([agencyId])
}

model StateRule {
  id            Int             @id @default(autoincrement())
  obligationId  Int
  obligation    StateObligation @relation(fields: [obligationId], references: [id], onDelete: Cascade)
  status        RuleStatus      @default(ACTIVE)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  predicate     Json
  output        Json?
  triggers      String[]        @default([])
  priority      Int             @default(100)
  notes         String?
  citations     StateRuleCitation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([status, effectiveFrom])
  @@index([priority])
  @@index([effectiveFrom, effectiveTo])
}

model StateRuleCitation {
  id        Int          @id @default(autoincrement())
  ruleId    Int
  rule      StateRule    @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  sourceId  Int?
  source    StateSource? @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  quote     String?
  createdAt DateTime     @default(now())

  @@index([ruleId])
  @@index([sourceId])
}